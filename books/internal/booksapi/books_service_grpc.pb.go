// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: books_service.proto

package booksapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BookService_CreateBook_FullMethodName        = "/books.BookService/CreateBook"
	BookService_GetBookByTitle_FullMethodName    = "/books.BookService/GetBookByTitle"
	BookService_ListBooksByAuthor_FullMethodName = "/books.BookService/ListBooksByAuthor"
	BookService_ListAllBooks_FullMethodName      = "/books.BookService/ListAllBooks"
)

// BookServiceClient is the client API for BookService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookServiceClient interface {
	CreateBook(ctx context.Context, in *Book, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetBookByTitle(ctx context.Context, in *Title, opts ...grpc.CallOption) (*Book, error)
	ListBooksByAuthor(ctx context.Context, in *Author, opts ...grpc.CallOption) (*ListBooks, error)
	ListAllBooks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListBooks, error)
}

type bookServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookServiceClient(cc grpc.ClientConnInterface) BookServiceClient {
	return &bookServiceClient{cc}
}

func (c *bookServiceClient) CreateBook(ctx context.Context, in *Book, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BookService_CreateBook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) GetBookByTitle(ctx context.Context, in *Title, opts ...grpc.CallOption) (*Book, error) {
	out := new(Book)
	err := c.cc.Invoke(ctx, BookService_GetBookByTitle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) ListBooksByAuthor(ctx context.Context, in *Author, opts ...grpc.CallOption) (*ListBooks, error) {
	out := new(ListBooks)
	err := c.cc.Invoke(ctx, BookService_ListBooksByAuthor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) ListAllBooks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListBooks, error) {
	out := new(ListBooks)
	err := c.cc.Invoke(ctx, BookService_ListAllBooks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookServiceServer is the server API for BookService service.
// All implementations should embed UnimplementedBookServiceServer
// for forward compatibility
type BookServiceServer interface {
	CreateBook(context.Context, *Book) (*emptypb.Empty, error)
	GetBookByTitle(context.Context, *Title) (*Book, error)
	ListBooksByAuthor(context.Context, *Author) (*ListBooks, error)
	ListAllBooks(context.Context, *emptypb.Empty) (*ListBooks, error)
}

// UnimplementedBookServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBookServiceServer struct {
}

func (UnimplementedBookServiceServer) CreateBook(context.Context, *Book) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBook not implemented")
}
func (UnimplementedBookServiceServer) GetBookByTitle(context.Context, *Title) (*Book, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookByTitle not implemented")
}
func (UnimplementedBookServiceServer) ListBooksByAuthor(context.Context, *Author) (*ListBooks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBooksByAuthor not implemented")
}
func (UnimplementedBookServiceServer) ListAllBooks(context.Context, *emptypb.Empty) (*ListBooks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllBooks not implemented")
}

// UnsafeBookServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookServiceServer will
// result in compilation errors.
type UnsafeBookServiceServer interface {
	mustEmbedUnimplementedBookServiceServer()
}

func RegisterBookServiceServer(s grpc.ServiceRegistrar, srv BookServiceServer) {
	s.RegisterService(&BookService_ServiceDesc, srv)
}

func _BookService_CreateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Book)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).CreateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookService_CreateBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).CreateBook(ctx, req.(*Book))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_GetBookByTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Title)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).GetBookByTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookService_GetBookByTitle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).GetBookByTitle(ctx, req.(*Title))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_ListBooksByAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Author)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).ListBooksByAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookService_ListBooksByAuthor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).ListBooksByAuthor(ctx, req.(*Author))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_ListAllBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).ListAllBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookService_ListAllBooks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).ListAllBooks(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// BookService_ServiceDesc is the grpc.ServiceDesc for BookService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "books.BookService",
	HandlerType: (*BookServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBook",
			Handler:    _BookService_CreateBook_Handler,
		},
		{
			MethodName: "GetBookByTitle",
			Handler:    _BookService_GetBookByTitle_Handler,
		},
		{
			MethodName: "ListBooksByAuthor",
			Handler:    _BookService_ListBooksByAuthor_Handler,
		},
		{
			MethodName: "ListAllBooks",
			Handler:    _BookService_ListAllBooks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "books_service.proto",
}
