// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/persons": {
            "get": {
                "description": "Get list persons",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "persons"
                ],
                "summary": "List persons",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit persons",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "offset persons",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Greater than or equal to age",
                        "name": "age_from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Less than or equal to age",
                        "name": "age_to",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by gender",
                        "name": "gender",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by country id",
                        "name": "country_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/list.ResponsePersons"
                        }
                    }
                }
            },
            "post": {
                "description": "Create new person",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "persons"
                ],
                "summary": "Create person",
                "parameters": [
                    {
                        "description": "person data",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/create.RequestCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/create.ResponseCreate"
                        }
                    }
                }
            }
        },
        "/persons/{id}": {
            "get": {
                "description": "Get information about a person",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "persons"
                ],
                "summary": "Get person",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "person id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/storage.Person"
                        }
                    }
                }
            },
            "put": {
                "description": "Update person information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "persons"
                ],
                "summary": "Update person",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "person id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "person data",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/update.RequestUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.RequestOK"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete person",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "persons"
                ],
                "summary": "Delete person",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "person id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.RequestOK"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "create.RequestCreate": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "patronymic": {
                    "type": "string"
                },
                "surname": {
                    "type": "string"
                }
            }
        },
        "create.ResponseCreate": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "list.ResponsePersons": {
            "type": "object",
            "properties": {
                "persons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/storage.Person"
                    }
                },
                "status": {
                    "type": "string",
                    "example": "OK"
                }
            }
        },
        "response.RequestOK": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "example": "OK"
                }
            }
        },
        "storage.Person": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "integer",
                    "example": 43
                },
                "country_id": {
                    "type": "string",
                    "example": "UA"
                },
                "gender": {
                    "type": "string",
                    "example": "male"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "Dmitriy"
                },
                "patronymic": {
                    "type": "string",
                    "example": "Vasilevich"
                },
                "surname": {
                    "type": "string",
                    "example": "Ushakov"
                }
            }
        },
        "update.RequestUpdate": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "integer"
                },
                "country_id": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "patronymic": {
                    "type": "string"
                },
                "surname": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "localhost:8080",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
