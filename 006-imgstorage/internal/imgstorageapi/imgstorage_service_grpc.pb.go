// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: imgstorage_service.proto

package imgstorageapi

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImgStorageClient is the client API for ImgStorage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImgStorageClient interface {
	UploadImage(ctx context.Context, opts ...grpc.CallOption) (ImgStorage_UploadImageClient, error)
	DownloadImage(ctx context.Context, in *DownloadImageRequest, opts ...grpc.CallOption) (ImgStorage_DownloadImageClient, error)
	GetListImage(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetListImageResponse, error)
}

type imgStorageClient struct {
	cc grpc.ClientConnInterface
}

func NewImgStorageClient(cc grpc.ClientConnInterface) ImgStorageClient {
	return &imgStorageClient{cc}
}

func (c *imgStorageClient) UploadImage(ctx context.Context, opts ...grpc.CallOption) (ImgStorage_UploadImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &ImgStorage_ServiceDesc.Streams[0], "/imgstorage.ImgStorage/UploadImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &imgStorageUploadImageClient{stream}
	return x, nil
}

type ImgStorage_UploadImageClient interface {
	Send(*UploadImageRequest) error
	CloseAndRecv() (*UploadImageResponse, error)
	grpc.ClientStream
}

type imgStorageUploadImageClient struct {
	grpc.ClientStream
}

func (x *imgStorageUploadImageClient) Send(m *UploadImageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *imgStorageUploadImageClient) CloseAndRecv() (*UploadImageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadImageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *imgStorageClient) DownloadImage(ctx context.Context, in *DownloadImageRequest, opts ...grpc.CallOption) (ImgStorage_DownloadImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &ImgStorage_ServiceDesc.Streams[1], "/imgstorage.ImgStorage/DownloadImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &imgStorageDownloadImageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ImgStorage_DownloadImageClient interface {
	Recv() (*DownloadImageResponse, error)
	grpc.ClientStream
}

type imgStorageDownloadImageClient struct {
	grpc.ClientStream
}

func (x *imgStorageDownloadImageClient) Recv() (*DownloadImageResponse, error) {
	m := new(DownloadImageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *imgStorageClient) GetListImage(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetListImageResponse, error) {
	out := new(GetListImageResponse)
	err := c.cc.Invoke(ctx, "/imgstorage.ImgStorage/GetListImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImgStorageServer is the server API for ImgStorage service.
// All implementations should embed UnimplementedImgStorageServer
// for forward compatibility
type ImgStorageServer interface {
	UploadImage(ImgStorage_UploadImageServer) error
	DownloadImage(*DownloadImageRequest, ImgStorage_DownloadImageServer) error
	GetListImage(context.Context, *empty.Empty) (*GetListImageResponse, error)
}

// UnimplementedImgStorageServer should be embedded to have forward compatible implementations.
type UnimplementedImgStorageServer struct {
}

func (UnimplementedImgStorageServer) UploadImage(ImgStorage_UploadImageServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}
func (UnimplementedImgStorageServer) DownloadImage(*DownloadImageRequest, ImgStorage_DownloadImageServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadImage not implemented")
}
func (UnimplementedImgStorageServer) GetListImage(context.Context, *empty.Empty) (*GetListImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListImage not implemented")
}

// UnsafeImgStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImgStorageServer will
// result in compilation errors.
type UnsafeImgStorageServer interface {
	mustEmbedUnimplementedImgStorageServer()
}

func RegisterImgStorageServer(s grpc.ServiceRegistrar, srv ImgStorageServer) {
	s.RegisterService(&ImgStorage_ServiceDesc, srv)
}

func _ImgStorage_UploadImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImgStorageServer).UploadImage(&imgStorageUploadImageServer{stream})
}

type ImgStorage_UploadImageServer interface {
	SendAndClose(*UploadImageResponse) error
	Recv() (*UploadImageRequest, error)
	grpc.ServerStream
}

type imgStorageUploadImageServer struct {
	grpc.ServerStream
}

func (x *imgStorageUploadImageServer) SendAndClose(m *UploadImageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *imgStorageUploadImageServer) Recv() (*UploadImageRequest, error) {
	m := new(UploadImageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ImgStorage_DownloadImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadImageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImgStorageServer).DownloadImage(m, &imgStorageDownloadImageServer{stream})
}

type ImgStorage_DownloadImageServer interface {
	Send(*DownloadImageResponse) error
	grpc.ServerStream
}

type imgStorageDownloadImageServer struct {
	grpc.ServerStream
}

func (x *imgStorageDownloadImageServer) Send(m *DownloadImageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ImgStorage_GetListImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImgStorageServer).GetListImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imgstorage.ImgStorage/GetListImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImgStorageServer).GetListImage(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ImgStorage_ServiceDesc is the grpc.ServiceDesc for ImgStorage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImgStorage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "imgstorage.ImgStorage",
	HandlerType: (*ImgStorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetListImage",
			Handler:    _ImgStorage_GetListImage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadImage",
			Handler:       _ImgStorage_UploadImage_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadImage",
			Handler:       _ImgStorage_DownloadImage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "imgstorage_service.proto",
}
